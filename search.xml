<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Dockerfile指令简谈]]></title>
    <url>%2F2019%2F02%2F17%2FDockerfile%E6%8C%87%E4%BB%A4%E7%AE%80%E8%B0%88%2F</url>
    <content type="text"><![CDATA[Docker容器被类比成被赋予了生命的Docker镜像。它本质上就是一个具有容器特质和微操作系统特质的应用而已。 Dockerfile 是Docker的核心，它告诉Docker怎样去创建镜像。Docker容器是具有层状结构的。除了最终层，其他所有层都是只读的。Dockerfile正好指明了通过什么样的顺序和内容来添加层。基础镜像会提供初始化层，基础镜像也被我们叫做父镜像。Docker会从远端仓库下载我们需要的镜像层，而我们已经下载过的镜像层， docker会复用，不会重复下载。 Dockerfile指令都是大写的，并且通常出现在行首。每一行都可以容纳一个指令，创建镜像的时候，这些指令都是从上到下依次执行的。 只有FROM,RUN,COPY,ADD 在最终镜像中有创建层的功能。 而其他的指令则负责配置信息，元数据信息，告诉docker运行阶段要做的事情：比如暴露端口、运行某脚本等。 以下是Dockerfile一些重要的指令 A Dozen Dockerfile InstructionsFROM — specifies the base (parent) image. LABEL —provides metadata. Good place to include maintainer info. ENV — sets a persistent environment variable. RUN —runs a command and creates an image layer. Used to install packages into containers. COPY — copies files and directories to the container. ADD — copies files and directories to the container. Can upack local .tar files. CMD — provides a command and arguments for an executing container. Parameters can be overridden. There can be only one CMD. WORKDIR — sets the working directory for the instructions that follow. ARG — defines a variable to pass to Docker at build-time. ENTRYPOINT — provides command and arguments for an executing container. Arguments persist. EXPOSE — exposes a port.VOLUME — creates a directory mount point to access and store persistent data. FROM首先看一下FROM， FROM指令用来指定基础（父）镜像，比如： 1FROM ubuntu:18.04 ubuntu是仓库名称， 18.04是标签名称，tag通常表示着软件版本。 Tag信息如果缺失的话，Docker会默认为latest tag. 一般建议还是将tag打上，以避免不必要的升级造成一定的兼容性问题。 当以上Dockerfile首次开始构建镜像的时候，Docker会从ubuntu:18.04镜像中下载基础层，这些层就像栈一样，层层堆叠。每层都是一个文件。 这些由基础镜像构成的层，是只读层。 当你创建容器的时候， 你可以添加一个可写层，在这些只读层的顶部。Docker使用写时拷贝策略来提升效率。在一个镜像中，假设某层已经在某个上层已经出现过，那么Docker会使用已存在的文件，不会再去下载新的。 再来看这个例子 123456789FROM python:3.7.2-alpine3.8LABEL maintainer="jeffmshale@gmail.com"ENV ADMIN="jeff"RUN apk update &amp;&amp; apk upgrade &amp;&amp; apk add bashCOPY . ./appADD https://raw.githubusercontent.com/discdiver/pachy-vid/master/sample_vids/vid1.mp4 \/my_app_directoryRUN ["mkdir", "/a_directory"]CMD ["python", "./my_script.py"] 以 python:3.7.2-alpine3.8为基础镜像，这个镜像中仅仅包含了Linux 和Python，Alpine 镜像是一种流行、小巧、快速、安全的Linux操作系统，但是它并没有包含多少细节性的东西， 所以轻便。 LABEL里面存放了镜像维护者的联系方式。它并不会影响镜像和容器的创建，也不会占用太多的空间，仅仅是作为一个信息存管的作用 ENV设置容器运行时的永久的环境变量。如果你在Dockfile里面经常使用某个常量，并且希望在以后某个时候修改它， 那么在ENV进行设置，是个不错的选择。 RUNRUN会在构建时创建一个layer，Docker会在每一次执行完RUN后，提交镜像的state。 RUN命令 经常被用在从镜像中安装package， apk是Alpine Linux的安装包管理器。 比如本例：RUN apk update &amp;&amp; apk upgrade 告诉Docker从基础镜像里更新安装包。 &amp;&amp; apk add bash 告诉Docker 安装bash到镜像中。 RUN 以及其兄弟 CMD ENTRYPOINT 都可以分别用 exec 和shell 格式使用。 exec格式使用JSON 数组的语法 比如 RUN [&quot;my_executable&quot;, &quot;my_first_param1&quot;, &quot;my_second_param2&quot;] shell语法 RUN apk update &amp;&amp; apk upgrade &amp;&amp; apk add 比较建议exec格式，但是别忘了打双引号 COPYCOPY指令告诉docker 如何从本地的构建上下文路径复制文件到docker镜像的工作目录中。 COPY会创建目标目录 ADDADD与COPY作用相同，但是相较之下多了两个其他场景 ADD可以从远端URL复制文件到容器充 ADD可以解压本地tar文件 Docker的官方文档不建议使用远端URL下载文件，因为不能删掉，额外的文件会浪费最终的镜像空间。同时，官方文档也建议我们尽可能使用COPY而不是ADD来提升明确性。但是笔者认为Docker完全可以合并这两个命令，他们的功能性重复了，命令过细反而不利于用户记忆。 注意我们上面举的例子 ，ADD命令 有个反斜杠 \ ， 这其实是个行连接符， 当命令过长的时候， 我们为了保证可读性，而采用了换行手段，那么这个时候，行连接符就很有必要了。 CMDCMD是Docker容器启动好之后，需要执行的命令。 它在镜像创建时期不会提交任何命令的结果。 需要注意的是： 每个Dockerfile文件中只允许有一个CMD命令，否则，以最后一个为准。 CMD必须包含一个可执行程序，否则，ENTRYPOINT指令就必须存在。并且，它们都必须是JSON格式的 docker run 的命令行参数会覆盖CMD中的参数 接下来再看个例子 12345678910111213141516FROM python:3.7.2-alpine3.8LABEL maintainer="jeffmshale@gmail.com"# Install dependenciesRUN apk add --update git# Set current working directoryWORKDIR /usr/src/my_app_directory# Copy code from your local context to the image working directoryCOPY . .# Set default value for a variableARG my_var=my_default_value# Set code to run at container run timeENTRYPOINT ["python", "./app/my_script.py", "my_var"]# Expose our port to the worldEXPOSE 8000# Create a volume for data storageVOLUME /my_volume Dockerfile的注释 也是一个简单的# 包安装只是Dockerfile的一个初级操作，通过RUN指令，我们有很多方法来进行安装安装包。比如在Alpine Docker镜像下使用apk， apk就像是常规Linux系统中的apt-get 命令。举例： 比如在常规ubuntu镜像下，我们使用 RUN apt-get update &amp;&amp; apt-get install my_package 除了apk，apt-get 之外，Python包还可以使用pip，wheel，conda等命令。总之，有形形色色的包安装工具。 底层的镜像层必须已经提供相应的包安装器， 否则，安装会出现问题。 如果要在单命令中安装许多个软件包，那么尽量使用换行符\ ，这样看起来会更加清晰；而不是拆分到多个RUN指令中，否则会增加镜像层数。再或者，你可以将你需要安装的软件包列一个清单，把他们全部装在requirements.txt文件中。 WORKDIRWORKDIR改变了容器的工作目录， COPY ADD RUN CMD ENTRYPOINT这些命令都得遵守工作目录的设定。需要注意的是 尽量使用绝对全路径，而不是如cd一样的导航命令 若文件夹不存在会自动创建 可以使用多个WORKDIR指令，如果使用了相对路径，那么每个WORKDIR指令都会改变当前目录 ARGARG定义 从命令行到镜像创建的变量。 他并不能在容器运行时可用。 ENTRYPOINT有点类似于CMD，但是ENTRYPOINT的参数不可以被容器运行时的命令所覆盖。 相反，docker run p1 p2 这些参数会被追加append到ENTRYPOINT已存在参数的后面 一个Dockerfile至少要有一个CMD或ENTRYPOINT指令，Docker官方文档建议： 时刻都运行相同的命令 ， 用ENTRYPOINT 当容器要被用作可执行程序 ，用ENTRYPOINT 当需要用命令行的额外参数来覆盖已有参数时，用CMD EXPOSEEXPOSE命令指定了容器要暴露的端口，实际上，并没有真正暴露端口，它只是在创建镜像的人和运行容器的人中建担任一个引导的作用。使用docker run -p可以暴露端口。-P会暴露所有端口 VOLUME卷指明了容器存储和访问持久化数据的途径。]]></content>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初探容器的隔离与限制]]></title>
    <url>%2F2018%2F12%2F24%2F%E5%88%9D%E6%8E%A2%E5%AE%B9%E5%99%A8%E7%9A%84%E9%9A%94%E7%A6%BB%E4%B8%8E%E9%99%90%E5%88%B6%2F</url>
    <content type="text"><![CDATA[docker的隔离我们都知道计算机只认识0和1，所以无论用什么语言编写的程序都需要通过某种方式翻译成二进制文件，才能让计算机看懂我们的代码，从而将软件在计算机硬件上运行起来。 且为了让代码能正常运行。我们往往要提供相应的数据，使代码进行一些输入输出操作。这个数据和二进制代码的综合，就是我们通常说的一个程序。也叫代码的可执行镜像。一旦程序被执行起来，它就从磁盘上的二进制文件编程了内存中的数据，寄存器中的值，被打开的文件等等等。这个程序运行起来后， 计算机执行环境的综合 ，被我们称作进程 进程的概念比较抽象，当他没有运行时，它的表现就是程序本身，是静止的。当他运行起来，计算机数据和状态的综合，就是一个运行中的进程。 我们平常所学习的docker容器的核心技术，是通过约束和修改进程参数的动态表现，来人为地为进程创造出一个可识别的边界，让进程本身误以为自己是在一个独立的运行环境内。 如果我们在docker中运行一个与运行着/bin/bash的容器， 我们进入容器后， 可以看到这个容器通过ps命令查看到，在容器里运行的bin/bash 和ps 已经和外界产生了‘隔离’ ，仿佛是在另外一台机器上。 1234root@b8945c78dc0e:/# ps PID TTY TIME CMD 67 pts/6 00:00:00 bash 107 pts/6 00:00:00 ps 但是， 整个docker容器依然在宿主机上 原来的进程。 这得益于Linux系统的NameSpace机制，它是linux系统创建新进程的一个可选参数。 1int pid = clone(main_function, stack_size, CLONE_NEWPID | SIGCHLD, NULL); 而当我们用 clone() 系统调用创建一个新进程时，指定参数CLONE_NEWPID，可以使这个新创建的进程看到一个全新的进程空间， 在这里它的PID=67 而不是原来的PID 。 不仅仅是PID NameSpace Linux还有Mount UTS NetWork 等等，用来对各种不同的进程进行类似的操作。实际上就是骗过了进程本身， 让其误以为自己是在一个独立的空间环境内 所以docker容器其实就是一种特殊处理过的进程， 自身被NameSpace的魔法骗过了，这些一个个的容器，其实就是宿主机的特殊进程，但自己却仿佛置身于宿主机之外，就如隔世一样。 实际上，容器是与自己的宿主机同享计算机资源的，它的隔离不如虚拟机彻底。但是各有好处。 docker的资源限制docker的本质是一个进程，且是一个单进程 这就意味着他与宿主机是完全共享计算机资源。那么万一docker自身所运行的程序出现性能故障后，将计算机资源占尽，对于宿主机将是非常致命的。 所以资源必须得到限制，才能保证宿主机上各进程有条不紊的进行。docker利用cgroups对 CPU、内存、磁盘、网络带宽等等资源进行了限制，同时，我们有必要了解Cgroups 还能够对进程进行优先级设置、审计，以及将进程挂起和恢复等操作。 你如果在容器里执行 top 指令，就会发现，它显示的信息居然是宿主机的 CPU 和内存数据，而不是当前容器的数据。 造成这个问题的原因就是，/proc 文件系统并不知道用户通过 Cgroups 给这个容器做了什么样的资源限制，即：/proc 文件系统不了解 Cgroups 限制的存在。 在生产环境中，这个问题必须进行修正，否则应用程序在容器里读取到的 CPU 核数、可用内存等信息都是宿主机上的数据，这会给应用的运行带来非常大的困惑和风险。这也是在企业中，容器化应用碰到的一个常见问题，也是容器相较于虚拟机另一个不尽如人意的地方。 总结一个docker容器，其实是一个“单进程”模型。 在这个运行的docker容器中。启用了多个Linux NameSpace来对环境进行隔离，并且所能使用的系统资源受到Cgroups的限制。 由于一个容器的本质就是一个进程，用户的应用进程实际上就是容器里 PID=1 的进程，也是其他后续创建的所有进程的父进程。这就意味着，在一个容器中，你没办法同时运行两个不同的应用，除非你能事先找到一个公共的 PID=1 的程序来充当两个不同应用的父进程，这也是为什么很多人都会用 systemd 或者 supervisord 这样的软件来代替应用本身作为容器的启动进程。 但是这不是好的解决方案.]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大话Mac快捷键]]></title>
    <url>%2F2018%2F12%2F23%2F%E5%A4%A7%E8%AF%9DMac%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[大话Mac快捷键MacOS 发展至今已经来到了10.14,ta深受广大Mac用户的喜爱. 当然这与其灵动且不失人性化的系统体验不可分割. 本文将对Mac一些主流的快捷键效率操作进行一个梳理.希望能对你有所帮助 1. Mac快捷键概览 control键在Mac系统里没有多少存在感，大多数情况下，作为其他快捷键组合的附属组合而存在。按住control +鼠标左键= 鼠标右键 option 在Mac系统里用途比较广泛 command 在Mac 系统里大约相当于windows的control, 是主快捷键 2. 中流砥柱command command+c 复制 command+v 粘贴 command+x 剪切 command+z 还原 command+tab 快速切换程序， 此时若按住command不松，再按下q 就能快速关闭程序了 command+q 强制关闭当前程序 command+w 关闭当前程序的当前tab页 command+~ 在同一个程序不同窗口之间切换 option+command+esc 呼出强制关闭程序界面 fn+delete 删除光标后面的内容 ​按住command +超链接 = 使用新标签打开链接 3. 天外奇兵option 拖拽文件或者图标的时候，按住option不放，可以进行复制 在菜单栏中 按下option 可以展示隐藏菜单 关闭同一个程序的多个窗口，点击关闭按钮前按住option，随之会关闭该程序的所有窗口 在访达中选中文件，按下command+option+i ,会自动打开检查器，展示文件信息，切换选择时，检查器不会消失，并且会更新成切换后的文件信息 按下option右键点击文件时，会出现文件默认打开方式和复制文件路径 按下opion 点击文件夹，自动展开文件夹结构 4. 截图先锋 command+shift+3 全屏截图 command+shift+4 区域截图 command+shift+4 区域截图 显示出十字光标后 按下space，可以截取单个窗口的截图 ​ 注意,在按下space之前,再多按住option 不松,还可以去掉边缘阴影 command+shift+control+3 全屏截图到剪切板 command+shift+control+4 区域截图到剪切板 使用spotlight 搜索 ‘抓图’ （英文系统搜索 image capture） 可以设置延时截图 在最新的MacOS mojave 中, 你只需要记住 command+shft+5 你就可以选择以上所有的截图的操作,非常方便. 甚至还可以进行录屏操作,不可谓不强大]]></content>
      <categories>
        <category>Mac OS</category>
      </categories>
      <tags>
        <tag>Mac OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始玩docker]]></title>
    <url>%2F2018%2F08%2F30%2F%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%8E%A9docker%2F</url>
    <content type="text"><![CDATA[从零开始玩docker一.安装1.Mac OS1&gt; 通过homebrew 安装brew cask install docker 2&gt; 官网手动下载dmg安装包2.Windows二. check1.检查docker 版本号1$ docker --version {: width=”100px” height=”50px”} 2. 2.设置镜像加速鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，网易的镜像地址：http://hub-mirror.c.163.com。在任务栏点击 Docker for mac 应用图标 -&gt; Perferences… -&gt; Daemon -&gt; Registry mirrors。在列表中填写加速器地址即可。修改完成之后，点击 Apply &amp; Restart 按钮，Docker 就会重启并应用配置的镜像地址了。 我们可以使用 1$ docker info 来检查是否配置成功 三.尝试运行第一个Docker 容器1$ docker run -d -p 80:80 --name webserver nginx 服务运行后，可以访问 http://localhost，如果看到了 “Welcome to nginx!”，就说明 Docker for Mac 安装成功了。 四. 镜像查看所有镜像 1$ docker image ls 删除镜像 1$ docker image rm 镜像名 获取镜像 ubuntu16.04 1$ docker pull ubuntu:16.04 五.容器创建容器 1$ docker run ubuntu:14.04 /bin/echo 'Hello world' 查看正在运行的容器 1$ docker container ls 查看所有的容器（包括已终止的） 1$ docker container ls -a 删除掉所有已终止的容器 1$ docker container prune 删除指定的容器 1$ docker container rm 容器名]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[知识付费时代，这几个专栏不会让你失望]]></title>
    <url>%2F2018%2F08%2F01%2F%E7%9F%A5%E8%AF%86%E4%BB%98%E8%B4%B9%E6%97%B6%E4%BB%A3%EF%BC%8C%E8%BF%99%E5%87%A0%E4%B8%AA%E4%B8%93%E6%A0%8F%E4%B8%8D%E4%BC%9A%E8%AE%A9%E4%BD%A0%E5%A4%B1%E6%9C%9B%2F</url>
    <content type="text"><![CDATA[知识付费时代，这几个专栏不会让你失望1.左耳朵耗子专栏 相信我，骨灰级耗叔的专栏不会让你失望，每篇都够你啃一段时间了。 陈皓，人称耗子叔，是一位四十多岁的中年老男人，体型肥胖，白发苍苍，观点鲜明，个性十足。 他有 20 年软件开发及相关工作经验，先后在阿里巴巴、亚马逊、汤森路透等知名公司任职，对 IT 底层技术平台有深入的了解，尤其在大规模分布式系统的基础架构方面颇有研究。此外，他在团队管理、项目管理，以及程序员个人成长等方面也有自己一套独特的见解和方法。 从 2002 年开始写技术博客，到 2009 年左右在独立域名 CoolShell.cn（酷壳）上分享技术观点和实践总结，陈皓通过一篇篇观点鲜明、文风犀利的文章吸引了大量 IT 从业人员的关注，影响了成千上万程序员在技术选型、求职就业、个人成长等方面的思考和发展。 虽然有些会被读者认同，有些则会引来争议，但他一直坚持观点鲜明的写作风格，并希望这些观点能引起大家的讨论和点评。他认为，只有这样，分享才更有意义，也能让大家都能从中收获更多。 除了继续保持观点鲜明、犀利的行文风格，在“左耳听风”专栏中的每篇文章都是陈皓对自己多年“堵过的枪眼儿”“填过的坑儿”的深入思考和凝练，是一些与个人或企业切身利益相关的内容，或者说是更具指导性、更为商业化的内容。用他自己的话说，是一些非常来之不易的宝贵经验。 2. 硅谷女神的技术管理课 朱赟，英文名 Angela，很多人称她为“硅谷女神”，但她更喜欢别人叫她安姐。Angela 毕业于中国科技大学少年班，后在美国莱斯大学取得了计算机博士学位，在读期间主要涉及的技术领域是程序语言设计和生物信息学的大数据分析。她是 Square 公司的第一位华人女工程师，目前在硅谷的共享经济先驱 Airbnb 公司支付部门担任技术经理，负责支付和交易相关的业务。 Angela 拥有计算机博士和“资深程序媛”双重头衔，她的技术功底非常扎实，对计算机底层平台技术、算法、操作系统、数学、统计学、机器学习、生物信息大数据处理和搜索支付等相关业务都有精深见解，并在多个领域有论文发表。在 Square 和 Airbnb 两家公司的工作经历，则为她带来了更多的实战技能。 Angela 最早是 Airbnb 支付业务的核心架构师和技术骨干，现在是支付技术团队的领导者。从资深技术人员到管理者的角色转换大概是很多工程师面临的难题，毕竟协调团队的日常事务远不如编写代码精准可控。Angela 却在这一段过渡期得到了快速成长，并获取了诸多带领团队的经验与技能。她不囿于经典管理学本身的条框，而是跳出管理者的角色定位，从多重角度出发思考问题，从而形成了一套独特的管理思想。除此之外，长居硅谷生活与工作，Angela 对硅谷的工程师文化、技术特点、个人成长也都有精彩的解读。 2016 年 1 月，Angela 开通了微信公众号“嘀嗒嘀嗒”，从此写作一发不可收拾。她撰写了大量的科技、硅谷文化、个人成长、求职、求学等领域的相关文章。结合自己的心路历程和独特的经历，她以轻盈细腻的文笔，鲜明别致的观点，用顶尖女工程师的视角为读者呈现了硅谷的科技生态，以及她对互联网世界的理解，迅速吸引了十万的互联网读者。 我们常说写文章要留有余地，要给读者想象和发挥的空间。这一点 Angela 就做得很好，读她的文章常常会有意犹未尽的感觉，文末会引发大量有价值的思考和评论。她认为，好的评论和交流是连接作者和读者的纽带，会给双方都带来更多的成长空间。 在本专栏中，Angela 会更加聚焦在技术管理、技术实践、硅谷文化和个人成长领域，继续以女工程师和技术领导的视角，为大家讲解技术和认知的故事。她愿意把自己在技术和管理上的领悟及忠告、在硅谷工作的体会与见识，通过这个专栏分享给大家。 3. 二爷的产品专栏 我不是产品经理，订阅这个专栏纯粹是想拓宽自己的视野。二爷的专栏口碑确实有目共睹。 作者简介 邱岳，十年资深产品人，无码科技产品经理，千万级用户产品缔造者。 邱岳在产品领域有着多年的实践经验，他曾是阿里的产品经理，后任丁香园的产品总监，现于无码科技创业。十年的产品历程一路走来，让他在无数的产品战役中积攒了足够丰厚的产品经验，从大厂到创业的经历，更是让他练就了独到的产品视角。目前，他在无码科技主导的小程序产品已经拥有了数千万级的用户。 以上三位都是了不起的师父。 师父领进门，修行靠个人。 信息爆炸的时代，我们要学会拒绝今日头条，抖音，快手等垃圾APP占用我们的时间，如何合理利用自己的时间，真的就看个人了。 希望你不要成为思想上的巨人，行动上的矮子。 不要囤了一堆干货， 又把他们丢在了时间的裂缝中。 共勉！]]></content>
      <categories>
        <category>干货分享</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>专栏</tag>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JVM如何执行方法调用]]></title>
    <url>%2F2018%2F07%2F28%2FJVM%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%2F</url>
    <content type="text"><![CDATA[回顾 重载与重写 ​ 同类重载 (同一类中，两个方法名相同，但参数类型不同的方法 可以构成重载) ​ 子类与父类构成的重载（子类的方法与父类非私有方法名相同，但参数类型不同） ​ 重写（子类父类非静态非私有方法名 参数类型全部相同，子类对父类构成重写） ​ 要注意子类父类非私有方法的方法名和参数类型完全相同，且都为静态，那么不会构成重写，且子类中的方法隐藏了父类中的方法。 再看一个例子 12345678// 方法一public void doThings(String thing,Object ... things2)&#123; &#125;// 方法二 public void doThings(Object thing,Object things2,Object ... things3)&#123; &#125; doThings(null,1) 实际调用的是方法一 doThings(null,1,1) 实际调用的是方法一 doThings(null,new Object[]{1}) 手动绕开可变参数的语法糖，就能调动方法二 ，但是这种情况一般会引起编译器的报错，提示这个方法调用具有二义性。 这是为什么呢？ 来看看Java编译器对于方法的参数声明类型选取流程 不考虑自动拆装箱及可变参数 考虑自动拆装箱，但不考虑可变参数 考虑自动拆装箱，且考虑可变参数 方法一中，由于String是Object的子类，当doThings(null,1) ； 所以Java编译器会觉得方法一更加贴切。所以编译时会自动选择到方法一。 JVM的静态绑定和动态绑定JVM识别方法的关键在于 类名、方法名、以及方法描述符 其中方法描述符是由方法的参数类型和返回类型所构成。 JVM与java语言对重写的判定不同， java是基于方法名和参数类型 ，而JVM是基于方法描述符。所以JVM能够准确识别目标方法。 JVM对于重写的判定基于方法描述符，如果子类定义了与父类非私有、非静态方法相同名字的方法，那么只有这两个方法参数类型和返回类型一致，才会构成重写。 对于JAVA语言中重写而非JVM中非重写的情况，编译器会通过桥接方法来实现java的重写定义 对于重载方法的区分在编译阶段已完成，所以可以认为在JVM中并不存在重载这一概念。 所以在某些文章中， 重载称为静态绑定（static binding）或编译时多态（compile-time-polymophism）。 重写称为动态绑定(dynamic binding) 这个说法并非完全正确，因为某个类的重载方法可能被其子类所重写，所以Java编译器会将所有对非私有实例方法的调用编译为需要动态绑定的类型。 Java 字节码中调用相关的五种指令 invokestatic：调用静态方法 Invokespecial : 调用私有实例方法、构造器，以及使用super关键字调用父类实例方法或构造器和所有实现接口的默认方法。 Invokevirtual: 调用非私有实例方法 Invokeinterface :调用接口方法 Invokedynamic:调用动态方法 其中1，2 JVM能直接识别具体的目标方法 而 3，4 JVM 需要借助动态类型来确定具体的方法 （例外，若目标方法仅有一个， 比如目标方法被final修饰，那么就可以不借助动态类型来确定）]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JVM是如何加载类的]]></title>
    <url>%2F2018%2F07%2F28%2FJVM%E6%98%AF%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BD%E7%B1%BB%E7%9A%84%2F</url>
    <content type="text"><![CDATA[一、JVM类加载JVM的类加载就像是承包一个建筑工程，首先要出设计方案，然后报备，施工，交付。 从class文件到内存中的类，需要经过 「加载」 、「链接」、「初始化」这三大步骤。 JAVA语言的类型 分为 「基本类型」 和 「引用类型」 其中 「基本类型」 是由JVM 预先定义好的。 「引用类型」分为四大类 ： 类、接口、数组类、泛型参数（编译过程中被抹掉）。 JVM中具有前三种，但是数组类是JVM直接生成的，所以 类和接口是有对应的字节流，最常见的是class文件的形式。当然字节流还可以是由程序内部生成或者从网络中获取。这些不同形式的字节流都会被加载到JVM中，成为类或者接口。 ​ 二、类加载的三大步骤1.加载加载，是指查到字节流，并由此创建类的过程。 对于数组类来说，他没有对应的字节流，而是通过JVM直接生成的。 对于其他类来说，JVM需要借助类加载器来完成查找字节流的过程。 启动类加载器（boot class loader）就像是其他类加载器的祖师爷。 其他类加载器都是java.lang.ClassLoader的子类，唯独启动类加载器不是，它是由C++实现的。 JVM有一个潜规则叫做双亲委派模型，即每当一个类加载器接收到加载请求时，先要将请求转发给父类加载器，父类加载器没有找到请求的类的情况下，该加载器才会尝试去加载。 这儿子还真是孝顺，有活儿先给爸爸干。 在JAVA9之前 启动类加载器负责最基础、最重要的类 ，也就是JRE lib下jar包的类以及由JVM参数-Xbootclasspath指定的类。 除了启动类加载器外，另外两个重要的加载器 是「扩展类加载器 （extension class loader）」 和「应用类加载器(application class loader)」 扩展类加载器负责JRE lib/ext 下的jar包 以及JVM参数 java.ext.dirs指定的类 应用类加载器的父类是扩展类加载器。负责加载应用程序下的类。即JVM参数 -cp/-classpath ；系统变量java.class.path；环境变量CLASSPATH 所指定的路径 。 JAVA 9引入了模块系统，对上述类加载器进行了少许修改。这里不讨论。 2.链接链接是指将创建的类合并到JVM，使之能够执行的过程。 它分为验证，准备，解析三个阶段。 验证阶段，在于确保被加载类能满足JVM的约束条件。这就相当于设计好的工程图纸要交给有关部门审核是否合法合规了。 准备阶段，为被加载类的静态字段分配内存，以及其他类层次先关的数据结构的构造，比如动态绑定方法表。 解析阶段，即把上面形成符号引用解析成实际引用。如果符号指向一个未被加载的类，或其字段方法，那么解析将触发这个类的加载。 3.初始化如果被赋值的静态字段被final修饰，且它的类型是基本类型或者字符串，那么该字段会被JAVA编译器标记成常量值。 初始化即使为标记为常量值的字段赋值，以及执行「clinit」方法的过程。 JVM会加锁确保clinit 只被执行一次 初始化完成后，类才成为可执行状态。 JVM对类的初始化触发情况的举例： 虚拟机启动，初始化用户指定的主类 new 指令指定的目标类 调用静态方法的指令，启动静态方法所在类 访问静态字段，启动静态字段所在类 子类初始化触发父类初始化 一个借口定义了default方法，那么直接或间接实现该接口的类初始化会触发该接口的初始化 使用反射API进行反射调用，初始化这个类 初次调用MethodHanlde实例，初始化该MethodHandle指向方法所在的类]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo搭建个人博客（基础篇）]]></title>
    <url>%2F2018%2F07%2F08%2F%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[PreAs a developer,保持良好的写作和记录习惯是hin重要的。个人博客一种不错的形式。考虑到国内很多技术社区博客页面确实太老旧，太TM丑了，因此，开源个人博客服务开始流行起来，如 「wordpress 」,「hexo」 ,「jekyII 」等。 本文将基于「github pages+hexo」的技术方案来介绍，如何从零开始搭建个人博客。 正文环境安装Node.js 的安装 如果你是Mac 用户，建议使用nvm或brew 进行安装管理。 当然也可以访问Node.js官网 ，下载Node.js的安装包，自行安装好环境，做好配置。 这里就不一一赘述，应该难不倒作为程序员的你。 Git 的安装这里就不一一赘述， 别说你没装。 Git官网 hexo的安装请事先确认npm 命令可用，若不可用，请检查Node.js的环境变量是否已经正确配置。 确认命令可用后： Mac 用户打开终端，运行 $ npm install hexo-cli -g Windows 用户打开cmd 运行 $ npm install hexo-cli -g 这一步可能需要翻墙，所以没有梯子的同学，可以切换至淘宝镜像http://npm.taobao.org/ ，再执行以上命令。 初始设置hexo创建目录执行以下命令，hexo 将会在当前路径创建一个blog文件夹，这个文件夹将是你的个人博客的主要工作空间。 123hexo init blogcd blognpm install 生成静态页面$ hexo g 本地运行$ hexo s Have a look.打开浏览器 访问http://localhost:4000/ 你会发现，博客已经初始化完成，初始版本是 landscape 皮肤， 略丑。不用担心，后续你可以进行一系列强大的个性化定制。 几个常用的hexo 命令 12345- hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹- hexo server (hexo s) 启动本地web服务，用于博客的预览- hexo deploy (hexo d) 部署博客到远端（比如github, heroku等平台）- hexo new “postName” #新建文章- hexo new page “pageName” #新建页面 发布你的第一篇文章新建文件在终端输入 1hexo new page “helloword” 此时在source/_posts 文件夹下将会生成一个helloword.md 文件，请使用markdown语言编辑文件内容。 生成预览编辑完毕后在终端输入 1hexo g hexo 会在本地进行静态页面文件的生成，此时你可以执行hexo s 部署本地服务， 访问http://localhost:4000/ 进行预览 部署到远端本文的远程部署方案是与github pages 服务结合。 1st: 你需要创建一个$username.github.io 的github仓库， 其中$username= 你的GitHub昵称 不能有一字之差， 否则将无法启用Github pages 服务。 2nd: 安装hexo 远程部署插件 运行命令 $ npm install hexo-deployer-git --save 3rd:在全局配置文件_config.yml中 配置参数deploy 1234deploy: type: git repo: https://github.com/username/username.github.io.git branch: master 4th:执行hexo g 生成静态文件 执行hexo d 进行远程部署 5th:访问https://username.github.io 就可以看到你的博客主页啦。 至此， 个人博客的基础搭建已经完成。 hexo+github pages 博客进阶技巧，请关注后续文章。]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
