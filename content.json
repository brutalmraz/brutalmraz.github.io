{"meta":{"title":"PokerDealer's Club","subtitle":"年轻人啊，要提升自己的姿势水平。","description":"Talk is cheap, show me your bug.","author":"PokerBean","url":"http://brutalmraz.github.io"},"pages":[{"title":"关于本人","date":"2018-07-05T02:05:37.000Z","updated":"2018-07-05T02:06:19.739Z","comments":true,"path":"about/index.html","permalink":"http://brutalmraz.github.io/about/index.html","excerpt":"","text":"嘿嘿嘿"},{"title":"文章分类","date":"2018-07-05T02:01:46.000Z","updated":"2018-07-05T06:15:09.717Z","comments":false,"path":"categories/index.html","permalink":"http://brutalmraz.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-07-09T15:02:31.000Z","updated":"2018-07-09T15:08:13.973Z","comments":false,"path":"tags/index.html","permalink":"http://brutalmraz.github.io/tags/index.html","excerpt":"","text":""},{"title":"干货分享","date":"2018-08-01T13:44:02.000Z","updated":"2018-08-01T13:44:02.774Z","comments":true,"path":"干货分享/index.html","permalink":"http://brutalmraz.github.io/干货分享/index.html","excerpt":"","text":""}],"posts":[{"title":"知识付费时代，这几个专栏不会让你失望","slug":"知识付费时代，这几个专栏不会让你失望","date":"2018-08-01T13:44:33.000Z","updated":"2018-08-01T14:48:57.656Z","comments":true,"path":"2018/08/01/知识付费时代，这几个专栏不会让你失望/","link":"","permalink":"http://brutalmraz.github.io/2018/08/01/知识付费时代，这几个专栏不会让你失望/","excerpt":"","text":"知识付费时代，这几个专栏不会让你失望1.左耳朵耗子专栏 相信我，骨灰级耗叔的专栏不会让你失望，每篇都够你啃一段时间了。 陈皓，人称耗子叔，是一位四十多岁的中年老男人，体型肥胖，白发苍苍，观点鲜明，个性十足。 他有 20 年软件开发及相关工作经验，先后在阿里巴巴、亚马逊、汤森路透等知名公司任职，对 IT 底层技术平台有深入的了解，尤其在大规模分布式系统的基础架构方面颇有研究。此外，他在团队管理、项目管理，以及程序员个人成长等方面也有自己一套独特的见解和方法。 从 2002 年开始写技术博客，到 2009 年左右在独立域名 CoolShell.cn（酷壳）上分享技术观点和实践总结，陈皓通过一篇篇观点鲜明、文风犀利的文章吸引了大量 IT 从业人员的关注，影响了成千上万程序员在技术选型、求职就业、个人成长等方面的思考和发展。 虽然有些会被读者认同，有些则会引来争议，但他一直坚持观点鲜明的写作风格，并希望这些观点能引起大家的讨论和点评。他认为，只有这样，分享才更有意义，也能让大家都能从中收获更多。 除了继续保持观点鲜明、犀利的行文风格，在“左耳听风”专栏中的每篇文章都是陈皓对自己多年“堵过的枪眼儿”“填过的坑儿”的深入思考和凝练，是一些与个人或企业切身利益相关的内容，或者说是更具指导性、更为商业化的内容。用他自己的话说，是一些非常来之不易的宝贵经验。 2. 硅谷女神的技术管理课 朱赟，英文名 Angela，很多人称她为“硅谷女神”，但她更喜欢别人叫她安姐。Angela 毕业于中国科技大学少年班，后在美国莱斯大学取得了计算机博士学位，在读期间主要涉及的技术领域是程序语言设计和生物信息学的大数据分析。她是 Square 公司的第一位华人女工程师，目前在硅谷的共享经济先驱 Airbnb 公司支付部门担任技术经理，负责支付和交易相关的业务。 Angela 拥有计算机博士和“资深程序媛”双重头衔，她的技术功底非常扎实，对计算机底层平台技术、算法、操作系统、数学、统计学、机器学习、生物信息大数据处理和搜索支付等相关业务都有精深见解，并在多个领域有论文发表。在 Square 和 Airbnb 两家公司的工作经历，则为她带来了更多的实战技能。 Angela 最早是 Airbnb 支付业务的核心架构师和技术骨干，现在是支付技术团队的领导者。从资深技术人员到管理者的角色转换大概是很多工程师面临的难题，毕竟协调团队的日常事务远不如编写代码精准可控。Angela 却在这一段过渡期得到了快速成长，并获取了诸多带领团队的经验与技能。她不囿于经典管理学本身的条框，而是跳出管理者的角色定位，从多重角度出发思考问题，从而形成了一套独特的管理思想。除此之外，长居硅谷生活与工作，Angela 对硅谷的工程师文化、技术特点、个人成长也都有精彩的解读。 2016 年 1 月，Angela 开通了微信公众号“嘀嗒嘀嗒”，从此写作一发不可收拾。她撰写了大量的科技、硅谷文化、个人成长、求职、求学等领域的相关文章。结合自己的心路历程和独特的经历，她以轻盈细腻的文笔，鲜明别致的观点，用顶尖女工程师的视角为读者呈现了硅谷的科技生态，以及她对互联网世界的理解，迅速吸引了十万的互联网读者。 我们常说写文章要留有余地，要给读者想象和发挥的空间。这一点 Angela 就做得很好，读她的文章常常会有意犹未尽的感觉，文末会引发大量有价值的思考和评论。她认为，好的评论和交流是连接作者和读者的纽带，会给双方都带来更多的成长空间。 在本专栏中，Angela 会更加聚焦在技术管理、技术实践、硅谷文化和个人成长领域，继续以女工程师和技术领导的视角，为大家讲解技术和认知的故事。她愿意把自己在技术和管理上的领悟及忠告、在硅谷工作的体会与见识，通过这个专栏分享给大家。 3. 二爷的产品专栏 我不是产品经理，订阅这个专栏纯粹是想拓宽自己的视野。二爷的专栏口碑确实有目共睹。 作者简介 邱岳，十年资深产品人，无码科技产品经理，千万级用户产品缔造者。 邱岳在产品领域有着多年的实践经验，他曾是阿里的产品经理，后任丁香园的产品总监，现于无码科技创业。十年的产品历程一路走来，让他在无数的产品战役中积攒了足够丰厚的产品经验，从大厂到创业的经历，更是让他练就了独到的产品视角。目前，他在无码科技主导的小程序产品已经拥有了数千万级的用户。 以上三位都是了不起的师父。 师父领进门，修行靠个人。 信息爆炸的时代，我们要学会拒绝今日头条，抖音，快手等垃圾APP占用我们的时间，如何合理利用自己的时间，真的就看个人了。 希望你不要成为思想上的巨人，行动上的矮子。 不要囤了一堆干货， 又把他们丢在了时间的裂缝中。 共勉！","categories":[{"name":"干货分享","slug":"干货分享","permalink":"http://brutalmraz.github.io/categories/干货分享/"}],"tags":[{"name":"分享","slug":"分享","permalink":"http://brutalmraz.github.io/tags/分享/"},{"name":"专栏","slug":"专栏","permalink":"http://brutalmraz.github.io/tags/专栏/"},{"name":"课程","slug":"课程","permalink":"http://brutalmraz.github.io/tags/课程/"}]},{"title":"JVM如何执行方法调用","slug":"JVM如何执行方法调用","date":"2018-07-28T02:14:20.000Z","updated":"2018-07-29T03:35:45.066Z","comments":true,"path":"2018/07/28/JVM如何执行方法调用/","link":"","permalink":"http://brutalmraz.github.io/2018/07/28/JVM如何执行方法调用/","excerpt":"","text":"回顾 重载与重写 ​ 同类重载 (同一类中，两个方法名相同，但参数类型不同的方法 可以构成重载) ​ 子类与父类构成的重载（子类的方法与父类非私有方法名相同，但参数类型不同） ​ 重写（子类父类非静态非私有方法名 参数类型全部相同，子类对父类构成重写） ​ 要注意子类父类非私有方法的方法名和参数类型完全相同，且都为静态，那么不会构成重写，且子类中的方法隐藏了父类中的方法。 再看一个例子 12345678// 方法一public void doThings(String thing,Object ... things2)&#123; &#125;// 方法二 public void doThings(Object thing,Object things2,Object ... things3)&#123; &#125; doThings(null,1) 实际调用的是方法一 doThings(null,1,1) 实际调用的是方法一 doThings(null,new Object[]{1}) 手动绕开可变参数的语法糖，就能调动方法二 ，但是这种情况一般会引起编译器的报错，提示这个方法调用具有二义性。 这是为什么呢？ 来看看Java编译器对于方法的参数声明类型选取流程 不考虑自动拆装箱及可变参数 考虑自动拆装箱，但不考虑可变参数 考虑自动拆装箱，且考虑可变参数 方法一中，由于String是Object的子类，当doThings(null,1) ； 所以Java编译器会觉得方法一更加贴切。所以编译时会自动选择到方法一。 JVM的静态绑定和动态绑定JVM识别方法的关键在于 类名、方法名、以及方法描述符 其中方法描述符是由方法的参数类型和返回类型所构成。 JVM与java语言对重写的判定不同， java是基于方法名和参数类型 ，而JVM是基于方法描述符。所以JVM能够准确识别目标方法。 JVM对于重写的判定基于方法描述符，如果子类定义了与父类非私有、非静态方法相同名字的方法，那么只有这两个方法参数类型和返回类型一致，才会构成重写。 对于JAVA语言中重写而非JVM中非重写的情况，编译器会通过桥接方法来实现java的重写定义 对于重载方法的区分在编译阶段已完成，所以可以认为在JVM中并不存在重载这一概念。 所以在某些文章中， 重载称为静态绑定（static binding）或编译时多态（compile-time-polymophism）。 重写称为动态绑定(dynamic binding) 这个说法并非完全正确，因为某个类的重载方法可能被其子类所重写，所以Java编译器会将所有对非私有实例方法的调用编译为需要动态绑定的类型。 Java 字节码中调用相关的五种指令 invokestatic：调用静态方法 Invokespecial : 调用私有实例方法、构造器，以及使用super关键字调用父类实例方法或构造器和所有实现接口的默认方法。 Invokevirtual: 调用非私有实例方法 Invokeinterface :调用接口方法 Invokedynamic:调用动态方法 其中1，2 JVM能直接识别具体的目标方法 而 3，4 JVM 需要借助动态类型来确定具体的方法 （例外，若目标方法仅有一个， 比如目标方法被final修饰，那么就可以不借助动态类型来确定）","categories":[{"name":"JVM","slug":"JVM","permalink":"http://brutalmraz.github.io/categories/JVM/"}],"tags":[{"name":"JVM","slug":"JVM","permalink":"http://brutalmraz.github.io/tags/JVM/"}]},{"title":"JVM是如何加载类的","slug":"JVM是如何加载类的","date":"2018-07-27T16:18:02.000Z","updated":"2018-07-29T03:33:16.382Z","comments":true,"path":"2018/07/28/JVM是如何加载类的/","link":"","permalink":"http://brutalmraz.github.io/2018/07/28/JVM是如何加载类的/","excerpt":"","text":"一、JVM类加载JVM的类加载就像是承包一个建筑工程，首先要出设计方案，然后报备，施工，交付。 从class文件到内存中的类，需要经过 「加载」 、「链接」、「初始化」这三大步骤。 JAVA语言的类型 分为 「基本类型」 和 「引用类型」 其中 「基本类型」 是由JVM 预先定义好的。 「引用类型」分为四大类 ： 类、接口、数组类、泛型参数（编译过程中被抹掉）。 JVM中具有前三种，但是数组类是JVM直接生成的，所以 类和接口是有对应的字节流，最常见的是class文件的形式。当然字节流还可以是由程序内部生成或者从网络中获取。这些不同形式的字节流都会被加载到JVM中，成为类或者接口。 ​ 二、类加载的三大步骤1.加载加载，是指查到字节流，并由此创建类的过程。 对于数组类来说，他没有对应的字节流，而是通过JVM直接生成的。 对于其他类来说，JVM需要借助类加载器来完成查找字节流的过程。 启动类加载器（boot class loader）就像是其他类加载器的祖师爷。 其他类加载器都是java.lang.ClassLoader的子类，唯独启动类加载器不是，它是由C++实现的。 JVM有一个潜规则叫做双亲委派模型，即每当一个类加载器接收到加载请求时，先要将请求转发给父类加载器，父类加载器没有找到请求的类的情况下，该加载器才会尝试去加载。 这儿子还真是孝顺，有活儿先给爸爸干。 在JAVA9之前 启动类加载器负责最基础、最重要的类 ，也就是JRE lib下jar包的类以及由JVM参数-Xbootclasspath指定的类。 除了启动类加载器外，另外两个重要的加载器 是「扩展类加载器 （extension class loader）」 和「应用类加载器(application class loader)」 扩展类加载器负责JRE lib/ext 下的jar包 以及JVM参数 java.ext.dirs指定的类 应用类加载器的父类是扩展类加载器。负责加载应用程序下的类。即JVM参数 -cp/-classpath ；系统变量java.class.path；环境变量CLASSPATH 所指定的路径 。 JAVA 9引入了模块系统，对上述类加载器进行了少许修改。这里不讨论。 2.链接链接是指将创建的类合并到JVM，使之能够执行的过程。 它分为验证，准备，解析三个阶段。 验证阶段，在于确保被加载类能满足JVM的约束条件。这就相当于设计好的工程图纸要交给有关部门审核是否合法合规了。 准备阶段，为被加载类的静态字段分配内存，以及其他类层次先关的数据结构的构造，比如动态绑定方法表。 解析阶段，即把上面形成符号引用解析成实际引用。如果符号指向一个未被加载的类，或其字段方法，那么解析将触发这个类的加载。 3.初始化如果被赋值的静态字段被final修饰，且它的类型是基本类型或者字符串，那么该字段会被JAVA编译器标记成常量值。 初始化即使为标记为常量值的字段赋值，以及执行「clinit」方法的过程。 JVM会加锁确保clinit 只被执行一次 初始化完成后，类才成为可执行状态。 JVM对类的初始化触发情况的举例： 虚拟机启动，初始化用户指定的主类 new 指令指定的目标类 调用静态方法的指令，启动静态方法所在类 访问静态字段，启动静态字段所在类 子类初始化触发父类初始化 一个借口定义了default方法，那么直接或间接实现该接口的类初始化会触发该接口的初始化 使用反射API进行反射调用，初始化这个类 初次调用MethodHanlde实例，初始化该MethodHandle指向方法所在的类","categories":[{"name":"JVM","slug":"JVM","permalink":"http://brutalmraz.github.io/categories/JVM/"}],"tags":[{"name":"JVM","slug":"JVM","permalink":"http://brutalmraz.github.io/tags/JVM/"}]},{"title":"在centOS7上安装mysql5.6","slug":"在centOS7上安装mysql5-6","date":"2018-07-09T14:43:28.000Z","updated":"2018-07-09T15:09:46.793Z","comments":true,"path":"2018/07/09/在centOS7上安装mysql5-6/","link":"","permalink":"http://brutalmraz.github.io/2018/07/09/在centOS7上安装mysql5-6/","excerpt":"","text":"一、安装MySQL1、下载安装包mysql-5.6.34-linux-glibc2.5-x86_64.tar（可前往官网自行下载：http://dev.mysql.com/downloads/mysql/） 2、卸载系统自带的Mariadb 打开Terminal终端： 12[root@localhost ~]# rpm -qa|grep mariadb // 查询出来已安装的mariadb[root@localhost ~]# rpm -e --nodeps 文件名 // 卸载mariadb，文件名为上述命令查询出来的文件 3、删除etc目录下的my.cnf 1[root@localhost ~]# rm /etc/my.cnf 4、执行以下命令来创建mysql用户组 1[root@localhost ~]# groupadd mysql 5、执行以下命令来创建一个用户名为mysql的用户并加入mysql用户组 1[root@localhost ~]# useradd -g mysql mysql 6、将下载的压缩包放到 /usr/local/ 目录下（通过mv 要移动的文件 /usr/local/） 7、解压安装包 1[root@localhost ~]# tar -xvf mysql-5.6.34-linux-glibc2.5-x86_64.tar 注：如果压缩包为：mysql-5.6.34-linux-glibc2.5-x86_64.tar.gz， 1则解压命令为: tar -zxvf mysql-5.6.34-linux-glibc2.5-x86_64.tar.gz 8、将解压好的文件夹重命名为mysql 1[root@localhost local]# mv 解压出来的文件夹名 mysql 9、在 etc 下新建配置文件my.cnf，并在该文件中添加一下代码： 当然，也有简单方式：直接copy一份my.cnf文件到/etc下，然后再修改即可。 e g：copy一份/usr/local/mysql/support-files/下的my-default.cnf文件到/etc下 1命令为：[root@localhost support-files]# cp my-default.cnf /etc/my.cnf 然后，配置/etc目录下的my.cnf文件 1[root@localhost support-files]# vim /etc/my.cnf 通过vim编辑器编辑my.cnf代码如下： 12345678910111213141516171819202122[mysql]# 设置mysql客户端默认字符集default-character-set=utf8 socket=/var/lib/mysql/mysql.sock[mysqld]skip-name-resolve#设置3306端口port = 3306 socket=/var/lib/mysql/mysql.sock# 设置mysql的安装目录basedir=/usr/local/mysql# 设置mysql数据库的数据的存放目录datadir=/usr/local/mysql/data# 允许最大连接数max_connections=200# 服务端使用的字符集默认为8比特编码的latin1字符集character-set-server=utf8# 创建新表时将使用的默认存储引擎default-storage-engine=INNODBlower_case_table_name=1max_allowed_packet=16M 10、进入安装mysql软件目录 123[root@localhost ~]# cd /usr/local/mysql[root@localhost mysql]# chown -R mysql:mysql ./ 修改当前目录拥有着为mysql用户[root@localhost mysql]# ./scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ 安装数据库 注：若执行以上最后一个命令出现以下问题： 12FATAL ERROR: please install the following Perl modules before executing ./scripts/mysql_install_db:Data::Dumper 解决方法 ：安装autoconf库 12命令: yum -y install autoconf //此包安装时会安装Data:Dumper模块安装完成重新执行上述最后一个命令 重新回到上述第三个命令继续操作： 1[root@localhost mysql]# chown -R mysql:mysql data 修改当前data目录的拥有者为mysql用户 到此数据库安装完毕！ 二、配置MySQL1、授予my.cnf最大权限 1[root@localhost ~]# chown 777 /etc/my.cnf 设置开机自启动服务控制脚本： 2、复制启动脚本到资源目录 1[root@localhost mysql]# cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld 3、增加mysqld服务控制脚本执行权限 1[root@localhost mysql]# chmod +x /etc/rc.d/init.d/mysqld 4、将mysqld服务加入到系统服务 1[root@localhost mysql]# chkconfig --add mysqld 5、检查mysqld服务是否已经生效 1[root@localhost mysql]# chkconfig --list mysqld 命令输出类似下面的结果: 1mysqld 0:off 1:off 2:on 3:on 4:on 5:on 6:off 表明mysqld服务已经生效，在2、3、4、5运行级别随系统启动而自动启动，以后可以使用service命令控制mysql的启动和停止 1命令为:service mysqld start和service mysqld stop 6、启动mysqld 1[root@localhost mysql]# service mysqld start 7、将mysql的bin目录加入PATH环境变量，编辑 ~/.bash_profile文件 1[root@localhost mysql]# vim ~/.bash_profile 在文件最后添加如下信息: 1export PATH=$PATH:/usr/local/mysql/bin 然后按ESC键 继续 shift键加冒号打出来=&gt; ： 接下来输入wq回车即可 执行下面的命令是修改的内容立即生效: 1[root@localhost mysql]# source ~/.bash_profile 8、以root账户登录mysql,默认是没有密码的 1[root@localhost mysql]# mysql -uroot -p 要输入密码的时候直接回车即可。 9、设置root账户密码为root（也可以修改成你要的密码） 123mysql&gt;use mysqlmysql&gt;update user set password=password(&apos;root&apos;) where user=&apos;root&apos; and host=&apos;localhost&apos;;mysql&gt;flush privileges; 10、设置远程主机登录，注意下面的your username 和 your password改成你需要设置的用户和密码 12mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &apos;your username&apos;@&apos;%&apos; IDENTIFIED BY &apos;your password&apos; WITHGRANT OPTION;","categories":[{"name":"mysql","slug":"mysql","permalink":"http://brutalmraz.github.io/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://brutalmraz.github.io/tags/mysql/"}]},{"title":"hexo搭建个人博客（基础篇）","slug":"使用hexo搭建个人博客（一）","date":"2018-07-07T16:54:36.000Z","updated":"2018-07-09T15:09:56.880Z","comments":true,"path":"2018/07/08/使用hexo搭建个人博客（一）/","link":"","permalink":"http://brutalmraz.github.io/2018/07/08/使用hexo搭建个人博客（一）/","excerpt":"","text":"PreAs a developer,保持良好的写作和记录习惯是hin重要的。个人博客一种不错的形式。考虑到国内很多技术社区博客页面确实太老旧，太TM丑了，因此，开源个人博客服务开始流行起来，如 「wordpress 」,「hexo」 ,「jekyII 」等。 本文将基于「github pages+hexo」的技术方案来介绍，如何从零开始搭建个人博客。 正文环境安装Node.js 的安装 如果你是Mac 用户，建议使用nvm或brew 进行安装管理。 当然也可以访问Node.js官网 ，下载Node.js的安装包，自行安装好环境，做好配置。 这里就不一一赘述，应该难不倒作为程序员的你。 Git 的安装这里就不一一赘述， 别说你没装。 Git官网 hexo的安装请事先确认npm 命令可用，若不可用，请检查Node.js的环境变量是否已经正确配置。 确认命令可用后： Mac 用户打开终端，运行 $ npm install hexo-cli -g Windows 用户打开cmd 运行 $ npm install hexo-cli -g 这一步可能需要翻墙，所以没有梯子的同学，可以切换至淘宝镜像http://npm.taobao.org/ ，再执行以上命令。 初始设置hexo创建目录执行以下命令，hexo 将会在当前路径创建一个blog文件夹，这个文件夹将是你的个人博客的主要工作空间。 123hexo init blogcd blognpm install 生成静态页面$ hexo g 本地运行$ hexo s Have a look.打开浏览器 访问http://localhost:4000/ 你会发现，博客已经初始化完成，初始版本是 landscape 皮肤， 略丑。不用担心，后续你可以进行一系列强大的个性化定制。 几个常用的hexo 命令 12345- hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹- hexo server (hexo s) 启动本地web服务，用于博客的预览- hexo deploy (hexo d) 部署博客到远端（比如github, heroku等平台）- hexo new “postName” #新建文章- hexo new page “pageName” #新建页面 发布你的第一篇文章新建文件在终端输入 1hexo new page “helloword” 此时在source/_posts 文件夹下将会生成一个helloword.md 文件，请使用markdown语言编辑文件内容。 生成预览编辑完毕后在终端输入 1hexo g hexo 会在本地进行静态页面文件的生成，此时你可以执行hexo s 部署本地服务， 访问http://localhost:4000/ 进行预览 部署到远端本文的远程部署方案是与github pages 服务结合。 1st: 你需要创建一个$username.github.io 的github仓库， 其中$username= 你的GitHub昵称 不能有一字之差， 否则将无法启用Github pages 服务。 2nd: 安装hexo 远程部署插件 运行命令 $ npm install hexo-deployer-git --save 3rd:在全局配置文件_config.yml中 配置参数deploy 1234deploy: type: git repo: https://github.com/username/username.github.io.git branch: master 4th:执行hexo g 生成静态文件 执行hexo d 进行远程部署 5th:访问https://username.github.io 就可以看到你的博客主页啦。 至此， 个人博客的基础搭建已经完成。 hexo+github pages 博客进阶技巧，请关注后续文章。","categories":[{"name":"blog","slug":"blog","permalink":"http://brutalmraz.github.io/categories/blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://brutalmraz.github.io/tags/hexo/"}]}]}